package wrapper;


import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;

import org.bcos.web3j.abi.EventEncoder;
import org.bcos.web3j.abi.EventValues;
import org.bcos.web3j.abi.FunctionEncoder;
import org.bcos.web3j.abi.TypeReference;
import org.bcos.web3j.abi.datatypes.Event;
import org.bcos.web3j.abi.datatypes.Function;
import org.bcos.web3j.abi.datatypes.Type;
import org.bcos.web3j.abi.datatypes.Utf8String;
import org.bcos.web3j.abi.datatypes.generated.Int256;
import org.bcos.web3j.abi.datatypes.generated.Uint256;
import org.bcos.web3j.crypto.Credentials;
import org.bcos.web3j.protocol.Web3j;
import org.bcos.web3j.protocol.core.DefaultBlockParameter;
import org.bcos.web3j.protocol.core.methods.request.EthFilter;
import org.bcos.web3j.protocol.core.methods.response.Log;
import org.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.bcos.web3j.tx.Contract;
import org.bcos.web3j.tx.TransactionManager;

import rx.Observable;
import rx.functions.Func1;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.bcos.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version none.
 */
public final class FileInfo extends Contract {
    private static final String BINARY = "";

    private FileInfo(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private FileInfo(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<NewUserEventResponse> getNewUserEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewUser", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<NewUserEventResponse> responses = new ArrayList<NewUserEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            NewUserEventResponse typedResponse = new NewUserEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewUserEventResponse> newUserEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewUser", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewUserEventResponse>() {
            @Override
            public NewUserEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                NewUserEventResponse typedResponse = new NewUserEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<NewFileEventResponse> getNewFileEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewFile", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<NewFileEventResponse> responses = new ArrayList<NewFileEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            NewFileEventResponse typedResponse = new NewFileEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewFileEventResponse> newFileEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewFile", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewFileEventResponse>() {
            @Override
            public NewFileEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                NewFileEventResponse typedResponse = new NewFileEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<NewStatusEventResponse> getNewStatusEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewStatus", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<NewStatusEventResponse> responses = new ArrayList<NewStatusEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            NewStatusEventResponse typedResponse = new NewStatusEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewStatusEventResponse> newStatusEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewStatus", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewStatusEventResponse>() {
            @Override
            public NewStatusEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                NewStatusEventResponse typedResponse = new NewStatusEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<RequestFileEventEventResponse> getRequestFileEventEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RequestFileEvent", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RequestFileEventEventResponse> responses = new ArrayList<RequestFileEventEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RequestFileEventEventResponse typedResponse = new RequestFileEventEventResponse();
            typedResponse.state = (Utf8String) eventValues.getNonIndexedValues().get(0);
            typedResponse.info = (Utf8String) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RequestFileEventEventResponse> requestFileEventEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RequestFileEvent", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RequestFileEventEventResponse>() {
            @Override
            public RequestFileEventEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RequestFileEventEventResponse typedResponse = new RequestFileEventEventResponse();
                typedResponse.state = (Utf8String) eventValues.getNonIndexedValues().get(0);
                typedResponse.info = (Utf8String) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public List<ResponseFileEventEventResponse> getResponseFileEventEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ResponseFileEvent", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ResponseFileEventEventResponse> responses = new ArrayList<ResponseFileEventEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ResponseFileEventEventResponse typedResponse = new ResponseFileEventEventResponse();
            typedResponse.state = (Utf8String) eventValues.getNonIndexedValues().get(0);
            typedResponse.info = (Utf8String) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ResponseFileEventEventResponse> responseFileEventEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ResponseFileEvent", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ResponseFileEventEventResponse>() {
            @Override
            public ResponseFileEventEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ResponseFileEventEventResponse typedResponse = new ResponseFileEventEventResponse();
                typedResponse.state = (Utf8String) eventValues.getNonIndexedValues().get(0);
                typedResponse.info = (Utf8String) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Future<Utf8String> getUserByPage(Uint256 _pageNo, Uint256 _pageSize) {
        Function function = new Function("getUserByPage", 
                Arrays.<Type>asList(_pageNo, _pageSize), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> updateStatus(Utf8String _id, Int256 _status) {
        Function function = new Function("updateStatus", Arrays.<Type>asList(_id, _status), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> UploadFile(Utf8String _fileId, Utf8String _fileAddr, Utf8String _PubKeyToSymkey, Utf8String _plot, Utf8String _description, Utf8String _uploadTime, Utf8String _userId, Utf8String _department) {
        Function function = new Function("UploadFile", Arrays.<Type>asList(_fileId, _fileAddr, _PubKeyToSymkey, _plot, _description, _uploadTime, _userId, _department), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Uint256> getUserLength() {
        Function function = new Function("getUserLength", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> RequestFile(Utf8String _userId, Utf8String _fileId, Utf8String _requestId, Utf8String _requestTime) {
        Function function = new Function("RequestFile", Arrays.<Type>asList(_userId, _fileId, _requestId, _requestTime), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> addUser(Utf8String _userId, Utf8String _pubKey, Int256 _rank, Utf8String _department, Utf8String _createTime, Utf8String _updateTime) {
        Function function = new Function("addUser", Arrays.<Type>asList(_userId, _pubKey, _rank, _department, _createTime, _updateTime), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> ResponseFile(Utf8String _responseId, Utf8String _requestId, Utf8String _fileId, Utf8String _PubKeyToSymkey, Utf8String _fileAddr) {
        Function function = new Function("ResponseFile", Arrays.<Type>asList(_responseId, _requestId, _fileId, _PubKeyToSymkey, _fileAddr), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Int256> getNumber() {
        Function function = new Function("getNumber", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public static Future<FileInfo> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Int256 _number) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_number));
        return deployAsync(FileInfo.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static Future<FileInfo> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Int256 _number) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_number));
        return deployAsync(FileInfo.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static FileInfo load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new FileInfo(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static FileInfo load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new FileInfo(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class NewUserEventResponse {
        public Utf8String _json;
    }

    public static class NewFileEventResponse {
        public Utf8String _json;
    }

    public static class NewStatusEventResponse {
        public Utf8String _json;
    }

    public static class RequestFileEventEventResponse {
        public Utf8String state;

        public Utf8String info;
    }

    public static class ResponseFileEventEventResponse {
        public Utf8String state;

        public Utf8String info;
    }
}
