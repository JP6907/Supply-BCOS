package wrapper;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;

//import org.bcos.channel.client.TransactionSucCallback;
import org.bcos.web3j.abi.EventEncoder;
import org.bcos.web3j.abi.EventValues;
import org.bcos.web3j.abi.FunctionEncoder;
import org.bcos.web3j.abi.TypeReference;
import org.bcos.web3j.abi.datatypes.Event;
import org.bcos.web3j.abi.datatypes.Function;
import org.bcos.web3j.abi.datatypes.Type;
import org.bcos.web3j.abi.datatypes.Utf8String;
import org.bcos.web3j.abi.datatypes.generated.Int256;
import org.bcos.web3j.abi.datatypes.generated.Uint256;
import org.bcos.web3j.crypto.Credentials;
import org.bcos.web3j.protocol.Web3j;
import org.bcos.web3j.protocol.core.DefaultBlockParameter;
import org.bcos.web3j.protocol.core.methods.request.EthFilter;
import org.bcos.web3j.protocol.core.methods.response.Log;
import org.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.bcos.web3j.tx.Contract;
import org.bcos.web3j.tx.TransactionManager;

import rx.Observable;
import rx.functions.Func1;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.bcos.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version none.
 */
public final class SuplInfo extends Contract {
    private static final String BINARY = "606060405234156200001057600080fd5b604051620050ae380380620050ae83398101604052808051906020019091908051820191905050816000819055508060019080519060200190620000569291906200005f565b5050506200010e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000a257805160ff1916838001178555620000d3565b82800160010185558215620000d3579182015b82811115620000d2578251825591602001919060010190620000b5565b5b509050620000e29190620000e6565b5090565b6200010b91905b8082111562000107576000816000905550600101620000ed565b5090565b90565b614f90806200011e6000396000f300606060405236156100ce576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630d8e6e2c146100d3578063433259931461016157806347b47208146102375780635d401886146102605780636a4be3761461031857806375f8c822146103ee5780639350a8b51461046c578063959a3a7114610592578063a6a9353114610610578063b62447b3146106b5578063cdcbdb41146106de578063f2c9ecd814610931578063f5f5ba721461095a578063faf613ff146109e8575b600080fd5b34156100de57600080fd5b6100e6610a8d565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561012657808201518184015260208101905061010b565b50505050905090810190601f1680156101535780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016c57600080fd5b6101bc600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610b35565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101fc5780820151818401526020810190506101e1565b50505050905090810190601f1680156102295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561024257600080fd5b61024a610c3b565b6040518082815260200191505060405180910390f35b341561026b57600080fd5b6102fe600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610c48565b604051808215151515815260200191505060405180910390f35b341561032357600080fd5b610373600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611242565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103b3578082015181840152602081019050610398565b50505050905090810190601f1680156103e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103f957600080fd5b610452600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050611403565b604051808215151515815260200191505060405180910390f35b341561047757600080fd5b610590600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611a55565b005b341561059d57600080fd5b6105f6600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050611fad565b604051808215151515815260200191505060405180910390f35b341561061b57600080fd5b61063a6004808035906020019091908035906020019091905050612332565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561067a57808201518184015260208101905061065f565b50505050905090810190601f1680156106a75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106c057600080fd5b6106c861256f565b6040518082815260200191505060405180910390f35b34156106e957600080fd5b610917600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061257c565b604051808215151515815260200191505060405180910390f35b341561093c57600080fd5b610944612b53565b6040518082815260200191505060405180910390f35b341561096557600080fd5b61096d612b5c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109ad578082015181840152602081019050610992565b50505050905090810190601f1680156109da5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156109f357600080fd5b610a126004808035906020019091908035906020019091905050612b9f565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a52578082015181840152602081019050610a37565b50505050905090810190601f168015610a7f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610a95614d8b565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b2b5780601f10610b0057610100808354040283529160200191610b2b565b820191906000526020600020905b815481529060010190602001808311610b0e57829003601f168201915b5050505050905090565b610b3d614d8b565b610b57826020604051908101604052806000815250612ddc565b15610bae57610ba46040805190810160405280600281526020017f7b7d00000000000000000000000000000000000000000000000000000000000081525082612f1e90919063ffffffff16565b9050809050610c36565b610c33610c246004846040518082805190602001908083835b602083101515610bec5780518252602082019150602081019050602083039250610bc7565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020612f86565b82612f1e90919063ffffffff16565b90505b919050565b6000600680549050905090565b6000610c52614d8b565b610c91836040805190810160405280600181526020017f4100000000000000000000000000000000000000000000000000000000000000815250612ddc565b156111fe57826004856040518082805190602001908083835b602083101515610ccf5780518252602082019150602081019050602083039250610caa565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206006019080519060200190610d18929190614d9f565b506040805190810160405280600181526020017f50000000000000000000000000000000000000000000000000000000000000008152506003856040518082805190602001908083835b602083101515610d875780518252602082019150602081019050602083039250610d62565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206006019080519060200190610dd0929190614d9f565b506003846040518082805190602001908083835b602083101515610e095780518252602082019150602081019050602083039250610de4565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206004015460026003866040518082805190602001908083835b602083101515610e7a5780518252602082019150602081019050602083039250610e55565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001016040518082805460018160011615610100020316600290048015610f0b5780601f10610ee9576101008083540402835291820191610f0b565b820191906000526020600020905b815481529060010190602001808311610ef7575b50509150509081526020016040518091039020600201540360026003866040518082805190602001908083835b602083101515610f5d5780518252602082019150602081019050602083039250610f38565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001016040518082805460018160011615610100020316600290048015610fee5780601f10610fcc576101008083540402835291820191610fee565b820191906000526020600020905b815481529060010190602001808311610fda575b50509150509081526020016040518091039020600201819055506020604051908101604052806000815250905061109c6040805190810160405280600b81526020017f7b225f636f6e4944223a22000000000000000000000000000000000000000000815250856040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b905061111f6040805190810160405280600a81526020017f225f737461747573223a00000000000000000000000000000000000000000000815250846040805190810160405280600181526020017f7d0000000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b90507ff150d649ec141f0b8f073f0a348a26b6c5d555d188beaba3f47be9a8ec8c67a0816040518080602001828103825283818151815260200191508051906020019080838360005b83811015611183578082015181840152602081019050611168565b50505050905090810190601f1680156111b05780820380516001836020036101000a031916815260200191505b509250505060405180910390a17fc7e6f05741002696bc7031e6403db1417f032e6353d8371fd687b10572c7e9d560016040518082815260200191505060405180910390a16001915061123b565b7fc7e6f05741002696bc7031e6403db1417f032e6353d8371fd687b10572c7e9d560006040518082815260200191505060405180910390a1600091505b5092915050565b61124a614d8b565b61136a6002836040518082805190602001908083835b6020831015156112855780518252602082019150602081019050602083039250611260565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561134f5780601f106113245761010080835404028352916020019161134f565b820191906000526020600020905b81548152906001019060200180831161133257829003601f168201915b50505050506020604051908101604052806000815250612ddc565b15156113ea576113e36002836040518082805190602001908083835b6020831015156113ab5780518252602082019150602081019050602083039250611386565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020613a0e565b90506113fe565b602060405190810160405280600081525090505b919050565b600061140d614d8b565b611427846020604051908101604052806000815250612ddc565b158015611435575060008314155b15611a4957826003856040518082805190602001908083835b602083101515611473578051825260208201915060208101905060208303925061144e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060050154016003856040518082805190602001908083835b6020831015156114e357805182526020820191506020810190506020830392506114be565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600501819055506003846040518082805190602001908083835b6020831015156115555780518252602082019150602081019050602083039250611530565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600401546003856040518082805190602001908083835b6020831015156115c4578051825260208201915060208101905060208303925061159f565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206005015414156116ba576040805190810160405280600181526020017f43000000000000000000000000000000000000000000000000000000000000008152506003856040518082805190602001908083835b60208310151561166f578051825260208201915060208101905060208303925061164a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060060190805190602001906116b8929190614d9f565b505b8260026003866040518082805190602001908083835b6020831015156116f557805182526020820191506020810190506020830392506116d0565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160405180828054600181600116156101000203166002900480156117865780601f10611764576101008083540402835291820191611786565b820191906000526020600020905b815481529060010190602001808311611772575b50509150509081526020016040518091039020600201540160026003866040518082805190602001908083835b6020831015156117d857805182526020820191506020810190506020830392506117b3565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160405180828054600181600116156101000203166002900480156118695780601f10611847576101008083540402835291820191611869565b820191906000526020600020905b815481529060010190602001808311611855575b5050915050908152602001604051809103902060020181905550602060405190810160405280600081525090506119176040805190810160405280600b81526020017f7b225f696f754964223a22000000000000000000000000000000000000000000815250856040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b90506119a26040805190810160405280600a81526020017f225f616d6f756e74223a0000000000000000000000000000000000000000000081525061195b85613f5e565b6040805190810160405280600181526020017f7d0000000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b90507fa72dfd5774a4fdc9e90a43a1e22bdc677b9688725777b881bf8140867bc6f470816040518080602001828103825283818151815260200191508051906020019080838360005b83811015611a065780820151818401526020810190506119eb565b50505050905090810190601f168015611a335780820380516001836020036101000a031916815260200191505b509250505060405180910390a160019150611a4e565b600091505b5092915050565b611b756002856040518082805190602001908083835b602083101515611a905780518252602082019150602081019050602083039250611a6b565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b5a5780601f10611b2f57610100808354040283529160200191611b5a565b820191906000526020600020905b815481529060010190602001808311611b3d57829003601f168201915b50505050506020604051908101604052806000815250612ddc565b1515611d8057826002856040518082805190602001908083835b602083101515611bb45780518252602082019150602081019050602083039250611b8f565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001019080519060200190611bfd929190614d9f565b506305f5e1006002856040518082805190602001908083835b602083101515611c3b5780518252602082019150602081019050602083039250611c16565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020181905550816002856040518082805190602001908083835b602083101515611cae5780518252602082019150602081019050602083039250611c89565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206003019080519060200190611cf7929190614d9f565b50806002856040518082805190602001908083835b602083101515611d315780518252602082019150602081019050602083039250611d0c565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206004019080519060200190611d7a929190614d9f565b50611e99565b60a0604051908101604052808581526020018481526020016305f5e1008152602001838152602001828152506002856040518082805190602001908083835b602083101515611de45780518252602082019150602081019050602083039250611dbf565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000820151816000019080519060200190611e33929190614e1f565b506020820151816001019080519060200190611e50929190614e1f565b50604082015181600201556060820151816003019080519060200190611e77929190614e1f565b506080820151816004019080519060200190611e94929190614e1f565b509050505b7f2e8ef10935b19f1c3593162006814f90e4a4dfc2363beab5c3b6a41e73423a86611f2d6002866040518082805190602001908083835b602083101515611ef55780518252602082019150602081019050602083039250611ed0565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020613a0e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015611f6d578082015181840152602081019050611f52565b50505050905090810190601f168015611f9a5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150505050565b6000611fb7614d8b565b6120d76002856040518082805190602001908083835b602083101515611ff25780518252602082019150602081019050602083039250611fcd565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120bc5780601f10612091576101008083540402835291602001916120bc565b820191906000526020600020905b81548152906001019060200180831161209f57829003601f168201915b50505050506020604051908101604052806000815250612ddc565b1580156120e857506305f5e1008313155b1561232657826002856040518082805190602001908083835b6020831015156121265780518252602082019150602081019050602083039250612101565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020181905550602060405190810160405280600081525090506121f46040805190810160405280600b81526020017f7b225f6f72674944223a22000000000000000000000000000000000000000000815250856040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b905061227f6040805190810160405280600a81526020017f225f616d6f756e74223a0000000000000000000000000000000000000000000081525061223885613f5e565b6040805190810160405280600181526020017f7d0000000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b90507f6bf9372fa8d8feee5b62db537c53ebb7a81d2f6ddf6254d1d2ce739ebb7dd045816040518080602001828103825283818151815260200191508051906020019080838360005b838110156122e35780820151818401526020810190506122c8565b50505050905090810190601f1680156123105780820380516001836020036101000a031916815260200191505b509250505060405180910390a16001915061232b565b600091505b5092915050565b61233a614d8b565b60008060008085870293506001868501039250600580549050831015156123b757600060058054905011156123795760016005805490500392506123b6565b6040805190810160405280600281526020017f5b5d0000000000000000000000000000000000000000000000000000000000008152509450612565565b5b6123ff6040805190810160405280600181526020017f5b0000000000000000000000000000000000000000000000000000000000000081525086612f1e90919063ffffffff16565b9450600091508390505b828111151561251a578115612463576124606040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525086612f1e90919063ffffffff16565b94505b6125076124f8600360058481548110151561247a57fe5b906000526020600020900160405180828054600181600116156101000203166002900480156124e05780601f106124be5761010080835404028352918201916124e0565b820191906000526020600020905b8154815290600101906020018083116124cc575b50509150509081526020016040518091039020614138565b86612f1e90919063ffffffff16565b9450600191508080600101915050612409565b6125626040805190810160405280600181526020017f5d0000000000000000000000000000000000000000000000000000000000000081525086612f1e90919063ffffffff16565b94505b5050505092915050565b6000600580549050905090565b6000600260038b6040518082805190602001908083835b6020831015156125b85780518252602082019150602081019050602083039250612593565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160405180828054600181600116156101000203166002900480156126495780601f10612627576101008083540402835291820191612649565b820191906000526020600020905b815481529060010190602001808311612635575b50509150509081526020016040518091039020600201548613156126a8577fe4fe2196e1583cb0bc7ea7930d9c8782c085f8096fcb802007279b6a7c8c1e2360006040518082815260200191505060405180910390a160009050612b46565b6127c860048b6040518082805190602001908083835b6020831015156126e357805182526020820191506020810190506020830392506126be565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127ad5780601f10612782576101008083540402835291602001916127ad565b820191906000526020600020905b81548152906001019060200180831161279057829003601f168201915b50505050506020604051908101604052806000815250612ddc565b15156127d75760019050612b46565b610120604051908101604052808b81526020018a81526020018981526020018881526020018781526020018681526020018581526020018481526020018381525060048b6040518082805190602001908083835b602083101515612850578051825260208201915060208101905060208303925061282b565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600082015181600001908051906020019061289f929190614e1f565b5060208201518160010190805190602001906128bc929190614e1f565b5060408201518160020190805190602001906128d9929190614e1f565b5060608201518160030190805190602001906128f6929190614e1f565b506080820151816004015560a082015181600501908051906020019061291d929190614e1f565b5060c082015181600601908051906020019061293a929190614e1f565b5060e0820151816007019080519060200190612957929190614e1f565b50610100820151816008019080519060200190612975929190614e1f565b509050506006805480600101828161298d9190614e9f565b916000526020600020900160008c909190915090805190602001906129b3929190614d9f565b50507f974ccfef94c5d01ac28e5fc5abb903b7aa40c9e50e26683934029369fdc6fb72612a4960048c6040518082805190602001908083835b602083101515612a1157805182526020820191506020810190506020830392506129ec565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020612f86565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015612a89578082015181840152602081019050612a6e565b50505050905090810190601f168015612ab65780820380516001836020036101000a031916815260200191505b509250505060405180910390a1612b098a898b868a60006040805190810160405280600181526020017f550000000000000000000000000000000000000000000000000000000000000081525089614955565b7fe4fe2196e1583cb0bc7ea7930d9c8782c085f8096fcb802007279b6a7c8c1e2360016040518082815260200191505060405180910390a1600190505b9998505050505050505050565b60008054905090565b612b64614d8b565b6040805190810160405280600881526020017f5375706c496e666f000000000000000000000000000000000000000000000000815250905090565b612ba7614d8b565b6000806000808587029350600186850103925060068054905083101515612c245760006006805490501115612be6576001600680549050039250612c23565b6040805190810160405280600281526020017f5b5d0000000000000000000000000000000000000000000000000000000000008152509450612dd2565b5b612c6c6040805190810160405280600181526020017f5b0000000000000000000000000000000000000000000000000000000000000081525086612f1e90919063ffffffff16565b9450600091508390505b8281111515612d87578115612cd057612ccd6040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525086612f1e90919063ffffffff16565b94505b612d74612d656004600684815481101515612ce757fe5b90600052602060002090016040518082805460018160011615610100020316600290048015612d4d5780601f10612d2b576101008083540402835291820191612d4d565b820191906000526020600020905b815481529060010190602001808311612d39575b50509150509081526020016040518091039020612f86565b86612f1e90919063ffffffff16565b9450600191508080600101915050612c76565b612dcf6040805190810160405280600181526020017f5d0000000000000000000000000000000000000000000000000000000000000081525086612f1e90919063ffffffff16565b94505b5050505092915050565b60008082518451141515612df35760009150612f17565b600090505b8351811015612f12578281815181101515612e0f57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168482815181101515612e8a57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141515612f075760009150612f17565b806001019050612df8565b600191505b5092915050565b612f26614d8b565b60008060008451865101604051805910612f3d5750595b90808252806020026020018201604052509350602086019250602085019150602084019050612f6e81848851614d40565b612f7d86518201838751614d40565b50505092915050565b612f8e614d8b565b6040805190810160405280600181526020017f7b0000000000000000000000000000000000000000000000000000000000000081525090506130e36040805190810160405280600981526020017f22636f6e4944223a220000000000000000000000000000000000000000000000815250836000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156130975780601f1061306c57610100808354040283529160200191613097565b820191906000526020600020905b81548152906001019060200180831161307a57829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b90506132026040805190810160405280600b81526020017f2273616c654f7267223a22000000000000000000000000000000000000000000815250836001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156131b65780601f1061318b576101008083540402835291602001916131b6565b820191906000526020600020905b81548152906001019060200180831161319957829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b90506133216040805190810160405280600a81526020017f226275794f7267223a2200000000000000000000000000000000000000000000815250836002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156132d55780601f106132aa576101008083540402835291602001916132d5565b820191906000526020600020905b8154815290600101906020018083116132b857829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b90506134406040805190810160405280600d81526020017f227472616e7354797065223a2200000000000000000000000000000000000000815250836003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156133f45780601f106133c9576101008083540402835291602001916133f4565b820191906000526020600020905b8154815290600101906020018083116133d757829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b90506134cf6040805190810160405280600981526020017f22616d6f756e74223a00000000000000000000000000000000000000000000008152506134888460040154613f5e565b6040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b90506135ee6040805190810160405280600b81526020017f22636f6e48617368223a22000000000000000000000000000000000000000000815250836005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156135a25780601f10613577576101008083540402835291602001916135a2565b820191906000526020600020905b81548152906001019060200180831161358557829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b905061370d6040805190810160405280601081526020017f226c6174657374537461747573223a2200000000000000000000000000000000815250836006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156136c15780601f10613696576101008083540402835291602001916136c1565b820191906000526020600020905b8154815290600101906020018083116136a457829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b905061382c6040805190810160405280600d81526020017f227472616e7354696d65223a2200000000000000000000000000000000000000815250836007018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156137e05780601f106137b5576101008083540402835291602001916137e0565b820191906000526020600020905b8154815290600101906020018083116137c357829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b905061394b6040805190810160405280600e81526020017f2275706461746554696d65223a22000000000000000000000000000000000000815250836008018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156138ff5780601f106138d4576101008083540402835291602001916138ff565b820191906000526020600020905b8154815290600101906020018083116138e257829003601f168201915b50505050506040805190810160405280600281526020017f227d00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b9050919050565b61395a614d8b565b600080600080600080875189518b518d5101010160405180591061397b5750595b9080825280602002602001820160405250965060208b01955060208a019450602089019350602088019250602087019150600090506139be818301878d51614d40565b8a51810190506139d2818301868c51614d40565b8951810190506139e6818301858b51614d40565b8851810190506139fa818301848a51614d40565b875181019050505050505050949350505050565b613a16614d8b565b6040805190810160405280600181526020017f7b000000000000000000000000000000000000000000000000000000000000008152509050613b6b6040805190810160405280600981526020017f226f72674944223a220000000000000000000000000000000000000000000000815250836000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613b1f5780601f10613af457610100808354040283529160200191613b1f565b820191906000526020600020905b815481529060010190602001808311613b0257829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b9050613c8a6040805190810160405280600b81526020017f226f72674e616d65223a22000000000000000000000000000000000000000000815250836001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613c3e5780601f10613c1357610100808354040283529160200191613c3e565b820191906000526020600020905b815481529060010190602001808311613c2157829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b9050613d196040805190810160405280600b81526020017f22696f754c696d6974223a000000000000000000000000000000000000000000815250613cd28460020154613f5e565b6040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b9050613e386040805190810160405280600e81526020017f2263726561746554696d65223a22000000000000000000000000000000000000815250836003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613dec5780601f10613dc157610100808354040283529160200191613dec565b820191906000526020600020905b815481529060010190602001808311613dcf57829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b9050613f576040805190810160405280600e81526020017f2275706461746554696d65223a22000000000000000000000000000000000000815250836004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613f0b5780601f10613ee057610100808354040283529160200191613f0b565b820191906000526020600020905b815481529060010190602001808311613eee57829003601f168201915b50505050506040805190810160405280600281526020017f227d00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b9050919050565b613f66614d8b565b600080600080600080871415613fb3576040805190810160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250955061412e565b86945060019350600092506000871215613fda578660000394506000935082806001019350505b8491505b600082111561400357600a82811515613ff357fe5b0491508280600101935050613fde565b8260ff166040518059106140145750595b9080825280602002602001820160405250955083151561408f577f2d0000000000000000000000000000000000000000000000000000000000000086600081518110151561405e57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b6001830390505b600085111561412d576030600a868115156140ad57fe5b06017f01000000000000000000000000000000000000000000000000000000000000000286828060019003935060ff168151811015156140e957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8581151561412557fe5b049450614096565b5b5050505050919050565b614140614d8b565b6040805190810160405280600181526020017f7b0000000000000000000000000000000000000000000000000000000000000081525090506142956040805190810160405280600981526020017f22696f754964223a220000000000000000000000000000000000000000000000815250836000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156142495780601f1061421e57610100808354040283529160200191614249565b820191906000526020600020905b81548152906001019060200180831161422c57829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b90506143b46040805190810160405280600b81526020017f2266726f6d4f7267223a22000000000000000000000000000000000000000000815250836001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156143685780601f1061433d57610100808354040283529160200191614368565b820191906000526020600020905b81548152906001019060200180831161434b57829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b90506144d36040805190810160405280600b81526020017f22726563764f7267223a22000000000000000000000000000000000000000000815250836002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156144875780601f1061445c57610100808354040283529160200191614487565b820191906000526020600020905b81548152906001019060200180831161446a57829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b90506145f26040805190810160405280600d81526020017f227472616e7354696d65223a2200000000000000000000000000000000000000815250836003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156145a65780601f1061457b576101008083540402835291602001916145a6565b820191906000526020600020905b81548152906001019060200180831161458957829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b90506146816040805190810160405280600981526020017f22616d6f756e74223a000000000000000000000000000000000000000000000081525061463a8460040154613f5e565b6040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b90506147106040805190810160405280600a81526020017f2270616964416d74223a000000000000000000000000000000000000000000008152506146c98460050154613f5e565b6040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b905061482f6040805190810160405280600d81526020017f22696f75537461747573223a2200000000000000000000000000000000000000815250836006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156147e35780601f106147b8576101008083540402835291602001916147e3565b820191906000526020600020905b8154815290600101906020018083116147c657829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b905061494e6040805190810160405280600e81526020017f2275706461746554696d65223a22000000000000000000000000000000000000815250836007018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156149025780601f106148d757610100808354040283529160200191614902565b820191906000526020600020905b8154815290600101906020018083116148e557829003601f168201915b50505050506040805190810160405280600281526020017f227d00000000000000000000000000000000000000000000000000000000000081525084613952909392919063ffffffff16565b9050919050565b614a756003896040518082805190602001908083835b602083101515614990578051825260208201915060208101905060208303925061496b565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614a5a5780601f10614a2f57610100808354040283529160200191614a5a565b820191906000526020600020905b815481529060010190602001808311614a3d57829003601f168201915b50505050506020604051908101604052806000815250612ddc565b1515614a8057614d36565b61010060405190810160405280898152602001888152602001878152602001868152602001858152602001848152602001838152602001828152506003896040518082805190602001908083835b602083101515614af35780518252602082019150602081019050602083039250614ace565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000820151816000019080519060200190614b42929190614e1f565b506020820151816001019080519060200190614b5f929190614e1f565b506040820151816002019080519060200190614b7c929190614e1f565b506060820151816003019080519060200190614b99929190614e1f565b506080820151816004015560a0820151816005015560c0820151816006019080519060200190614bca929190614e1f565b5060e0820151816007019080519060200190614be7929190614e1f565b5090505060058054806001018281614bff9190614e9f565b916000526020600020900160008a90919091509080519060200190614c25929190614d9f565b50507fbfbdca690759acacbbdf3e9825f2909d2d22ff9bac4d35ab4b3dccb1e6226300614cbb60038a6040518082805190602001908083835b602083101515614c835780518252602082019150602081019050602083039250614c5e565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020614138565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015614cfb578082015181840152602081019050614ce0565b50505050905090810190601f168015614d285780820380516001836020036101000a031916815260200191505b509250505060405180910390a15b5050505050505050565b60005b602082101515614d685782518452602084019350602083019250602082039150614d43565b6001826020036101000a0390508019835116818551168181178652505050505050565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614de057805160ff1916838001178555614e0e565b82800160010185558215614e0e579182015b82811115614e0d578251825591602001919060010190614df2565b5b509050614e1b9190614ecb565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614e6057805160ff1916838001178555614e8e565b82800160010185558215614e8e579182015b82811115614e8d578251825591602001919060010190614e72565b5b509050614e9b9190614ecb565b5090565b815481835581811511614ec657818360005260206000209182019101614ec59190614ef0565b5b505050565b614eed91905b80821115614ee9576000816000905550600101614ed1565b5090565b90565b614f1991905b80821115614f155760008181614f0c9190614f1c565b50600101614ef6565b5090565b90565b50805460018160011615610100020316600290046000825580601f10614f425750614f61565b601f016020900490600052602060002090810190614f609190614ecb565b5b505600a165627a7a72305820fba4182373b63c1872467a4ba9248d01cfd495b5fd4d65ad14ac2718379fdb650029";

    private SuplInfo(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private SuplInfo(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<InitIouLimitDataEventResponse> getInitIouLimitDataEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("InitIouLimitData", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<InitIouLimitDataEventResponse> responses = new ArrayList<InitIouLimitDataEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            InitIouLimitDataEventResponse typedResponse = new InitIouLimitDataEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<InitIouLimitDataEventResponse> initIouLimitDataEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("InitIouLimitData", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, InitIouLimitDataEventResponse>() {
            @Override
            public InitIouLimitDataEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                InitIouLimitDataEventResponse typedResponse = new InitIouLimitDataEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<SetIouLimitEventResponse> getSetIouLimitEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SetIouLimit", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<SetIouLimitEventResponse> responses = new ArrayList<SetIouLimitEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            SetIouLimitEventResponse typedResponse = new SetIouLimitEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SetIouLimitEventResponse> setIouLimitEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SetIouLimit", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SetIouLimitEventResponse>() {
            @Override
            public SetIouLimitEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                SetIouLimitEventResponse typedResponse = new SetIouLimitEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<IouRecycleEventResponse> getIouRecycleEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("IouRecycle", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<IouRecycleEventResponse> responses = new ArrayList<IouRecycleEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            IouRecycleEventResponse typedResponse = new IouRecycleEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<IouRecycleEventResponse> iouRecycleEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("IouRecycle", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, IouRecycleEventResponse>() {
            @Override
            public IouRecycleEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                IouRecycleEventResponse typedResponse = new IouRecycleEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<AddIouEventResponse> getAddIouEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddIou", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AddIouEventResponse> responses = new ArrayList<AddIouEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AddIouEventResponse typedResponse = new AddIouEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddIouEventResponse> addIouEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddIou", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddIouEventResponse>() {
            @Override
            public AddIouEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AddIouEventResponse typedResponse = new AddIouEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<AddTransactionEventResponse> getAddTransactionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AddTransactionEventResponse> responses = new ArrayList<AddTransactionEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AddTransactionEventResponse typedResponse = new AddTransactionEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddTransactionEventResponse> addTransactionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddTransactionEventResponse>() {
            @Override
            public AddTransactionEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AddTransactionEventResponse typedResponse = new AddTransactionEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<UpdateTransStatusEventResponse> getUpdateTransStatusEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UpdateTransStatus", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<UpdateTransStatusEventResponse> responses = new ArrayList<UpdateTransStatusEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            UpdateTransStatusEventResponse typedResponse = new UpdateTransStatusEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UpdateTransStatusEventResponse> updateTransStatusEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UpdateTransStatus", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UpdateTransStatusEventResponse>() {
            @Override
            public UpdateTransStatusEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                UpdateTransStatusEventResponse typedResponse = new UpdateTransStatusEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }
  
    
    public List<AddTransactionResultEventResponse> getAddTransactionResultEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddTransactionResult", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<EventValues> valueList = extractEventParameters(event,transactionReceipt);
        ArrayList<AddTransactionResultEventResponse> responses = new ArrayList<AddTransactionResultEventResponse>(valueList.size());
        for(EventValues eventValues : valueList) {
            AddTransactionResultEventResponse typedResponse = new AddTransactionResultEventResponse();
            typedResponse._code = (Int256)eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }
    
    
    
    

    public Observable<AddTransactionResultEventResponse> addTransactionResultEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddTransactionResult", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddTransactionResultEventResponse>() {
            @Override
            public AddTransactionResultEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AddTransactionResultEventResponse typedResponse = new AddTransactionResultEventResponse();
                typedResponse._code = (Int256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<UpdateTransStatusResultEventResponse> getUpdateTransStatusResultEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UpdateTransStatusResult", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<UpdateTransStatusResultEventResponse> responses = new ArrayList<UpdateTransStatusResultEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            UpdateTransStatusResultEventResponse typedResponse = new UpdateTransStatusResultEventResponse();
            typedResponse._code = (Int256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UpdateTransStatusResultEventResponse> updateTransStatusResultEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UpdateTransStatusResult", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UpdateTransStatusResultEventResponse>() {
            @Override
            public UpdateTransStatusResultEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                UpdateTransStatusResultEventResponse typedResponse = new UpdateTransStatusResultEventResponse();
                typedResponse._code = (Int256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public Future<Utf8String> getVersion() {
        Function function = new Function("getVersion", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> queryTransByConId(Utf8String conID) {
        Function function = new Function("queryTransByConId", 
                Arrays.<Type>asList(conID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getTransLength() {
        Function function = new Function("getTransLength", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> updateTransStatus(Utf8String conID, Utf8String status) {
        Function function = new Function("updateTransStatus", Arrays.<Type>asList(conID, status), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

//    public void updateTransStatus(Utf8String conID, Utf8String status, TransactionSucCallback callback) {
//        Function function = new Function("updateTransStatus", Arrays.<Type>asList(conID, status), Collections.<TypeReference<?>>emptyList());
//        executeTransactionAsync(function, callback);
//    }

    public Future<Utf8String> getIouLimit(Utf8String orgID) {
        Function function = new Function("getIouLimit", 
                Arrays.<Type>asList(orgID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> iouRecycle(Utf8String iouId, Int256 amount) {
        Function function = new Function("iouRecycle", Arrays.<Type>asList(iouId, amount), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

//    public void iouRecycle(Utf8String iouId, Int256 amount, TransactionSucCallback callback) {
//        Function function = new Function("iouRecycle", Arrays.<Type>asList(iouId, amount), Collections.<TypeReference<?>>emptyList());
//        executeTransactionAsync(function, callback);
//    }

//    public Future<TransactionReceipt> initIouLimitData(Utf8String _orgID, Utf8String _orgName, Utf8String _createTime, Utf8String _updateTime) {
//        Function function = new Function("initIouLimitData", Arrays.<Type>asList(_orgID, _orgName, _createTime, _updateTime), Collections.<TypeReference<?>>emptyList());
//        return executeTransactionAsync(function);
//    }
    
    public Future<TransactionReceipt> initIouLimitData(Utf8String _orgID, Utf8String _orgName, Int256 _iouLimit, Utf8String _createTime, Utf8String _updateTime) {
        Function function = new Function("initIouLimitData", Arrays.<Type>asList(_orgID, _orgName, _iouLimit, _createTime, _updateTime), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }
    
    
    
    

    public Future<TransactionReceipt> setIouLimit(Utf8String orgID, Int256 amount) {
        Function function = new Function("setIouLimit", Arrays.<Type>asList(orgID, amount), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

//    public void setIouLimit(Utf8String orgID, Int256 amount, TransactionSucCallback callback) {
//        Function function = new Function("setIouLimit", Arrays.<Type>asList(orgID, amount), Collections.<TypeReference<?>>emptyList());
//        executeTransactionAsync(function, callback);
//    }

    public Future<Utf8String> getIouList(Uint256 _pageNo, Uint256 _pageSize) {
        Function function = new Function("getIouList", 
                Arrays.<Type>asList(_pageNo, _pageSize), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getIouLength() {
        Function function = new Function("getIouLength", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addTransaction(Utf8String _conID, Utf8String _saleOrg, Utf8String _buyOrg, Utf8String _transType, Int256 _amount, Utf8String _conHash, Utf8String _status, Utf8String _transTime, Utf8String _updateTime) {
        Function function = new Function("addTransaction", Arrays.<Type>asList(_conID, _saleOrg, _buyOrg, _transType, _amount, _conHash, _status, _transTime, _updateTime), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

//    public void addTransaction(Utf8String _conID, Utf8String _saleOrg, Utf8String _buyOrg, Utf8String _transType, Int256 _amount, Utf8String _conHash, Utf8String _status, Utf8String _transTime, Utf8String _updateTime, TransactionSucCallback callback) {
//        Function function = new Function("addTransaction", Arrays.<Type>asList(_conID, _saleOrg, _buyOrg, _transType, _amount, _conHash, _status, _transTime, _updateTime), Collections.<TypeReference<?>>emptyList());
//        executeTransactionAsync(function, callback);
//    }

    public Future<Int256> getNumber() {
        Function function = new Function("getNumber", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getContractName() {
        Function function = new Function("getContractName", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> queryTransList(Uint256 _pageNo, Uint256 _pageSize) {
        Function function = new Function("queryTransList", 
                Arrays.<Type>asList(_pageNo, _pageSize), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public static Future<SuplInfo> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Int256 _number, Utf8String _version) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_number, _version));
        return deployAsync(SuplInfo.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static Future<SuplInfo> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Int256 _number, Utf8String _version) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_number, _version));
        return deployAsync(SuplInfo.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static SuplInfo load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SuplInfo(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static SuplInfo load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SuplInfo(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class InitIouLimitDataEventResponse {
        public Utf8String _json;
    }

    public static class SetIouLimitEventResponse {
        public Utf8String _json;
    }

    public static class IouRecycleEventResponse {
        public Utf8String _json;
    }

    public static class AddIouEventResponse {
        public Utf8String _json;
    }

    public static class AddTransactionEventResponse {
        public Utf8String _json;
    }

    public static class UpdateTransStatusEventResponse {
        public Utf8String _json;
    }

    public static class AddTransactionResultEventResponse {
        public Int256 _code;
    }

    public static class UpdateTransStatusResultEventResponse {
        public Int256 _code;
    }
}
