package wrapper;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;
import org.bcos.web3j.abi.EventEncoder;
import org.bcos.web3j.abi.EventValues;
import org.bcos.web3j.abi.FunctionEncoder;
import org.bcos.web3j.abi.TypeReference;
import org.bcos.web3j.abi.datatypes.Event;
import org.bcos.web3j.abi.datatypes.Function;
import org.bcos.web3j.abi.datatypes.Type;
import org.bcos.web3j.abi.datatypes.Utf8String;
import org.bcos.web3j.abi.datatypes.generated.Int256;
import org.bcos.web3j.abi.datatypes.generated.Uint256;
import org.bcos.web3j.crypto.Credentials;
import org.bcos.web3j.protocol.Web3j;
import org.bcos.web3j.protocol.core.DefaultBlockParameter;
import org.bcos.web3j.protocol.core.methods.request.EthFilter;
import org.bcos.web3j.protocol.core.methods.response.Log;
import org.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.bcos.web3j.tx.Contract;
import org.bcos.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.bcos.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version none.
 */
public final class SuplInfo extends Contract {
    private static final String BINARY = "60806040523480156200001157600080fd5b5060405162004de638038062004de683398101806040528101908080519060200190929190805182019291905050508160008190555080600190805190602001906200005f92919062000068565b50505062000117565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000ab57805160ff1916838001178555620000dc565b82800160010185558215620000dc579182015b82811115620000db578251825591602001919060010190620000be565b5b509050620000eb9190620000ef565b5090565b6200011491905b8082111562000110576000816000905550600101620000f6565b5090565b90565b614cbf80620001276000396000f3006080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630d8e6e2c146100d5578063433259931461016557806347b472081461024757806359064088146102725780635d401886146103b75780636a4be3761461047e57806375f8c82214610560578063959a3a71146105eb578063a6a9353114610676578063b62447b314610726578063cdcbdb4114610751578063f2c9ecd8146109c6578063f5f5ba72146109f1578063faf613ff14610a81575b600080fd5b3480156100e157600080fd5b506100ea610b31565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561012a57808201518184015260208101905061010f565b50505050905090810190601f1680156101575780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017157600080fd5b506101cc600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610bd3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561020c5780820151818401526020810190506101f1565b50505050905090810190601f1680156102395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025357600080fd5b5061025c610cd3565b6040518082815260200191505060405180910390f35b34801561027e57600080fd5b506103b5600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610ce0565b005b3480156103c357600080fd5b50610464600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611231565b604051808215151515815260200191505060405180910390f35b34801561048a57600080fd5b506104e5600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611512565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561052557808201518184015260208101905061050a565b50505050905090810190601f1680156105525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561056c57600080fd5b506105d1600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291905050506116cd565b604051808215151515815260200191505060405180910390f35b3480156105f757600080fd5b5061065c600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050611d19565b604051808215151515815260200191505060405180910390f35b34801561068257600080fd5b506106ab6004803603810190808035906020019092919080359060200190929190505050612098565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106eb5780820151818401526020810190506106d0565b50505050905090810190601f1680156107185780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561073257600080fd5b5061073b6122ce565b6040518082815260200191505060405180910390f35b34801561075d57600080fd5b506109ac600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506122db565b604051808215151515815260200191505060405180910390f35b3480156109d257600080fd5b506109db612842565b6040518082815260200191505060405180910390f35b3480156109fd57600080fd5b50610a0661284b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a46578082015181840152602081019050610a2b565b50505050905090810190601f168015610a735780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a8d57600080fd5b50610ab66004803603810190808035906020019092919080359060200190929190505050612888565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610af6578082015181840152602081019050610adb565b50505050905090810190601f168015610b235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bc95780601f10610b9e57610100808354040283529160200191610bc9565b820191906000526020600020905b815481529060010190602001808311610bac57829003601f168201915b5050505050905090565b6060610bef826020604051908101604052806000815250612abe565b15610c4657610c3c6040805190810160405280600281526020017f7b7d00000000000000000000000000000000000000000000000000000000000081525082612c0090919063ffffffff16565b9050809050610cce565b610ccb610cbc6004846040518082805190602001908083835b602083101515610c845780518252602082019150602081019050602083039250610c5f565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020612c77565b82612c0090919063ffffffff16565b90505b919050565b6000600680549050905090565b610e006002866040518082805190602001908083835b602083101515610d1b5780518252602082019150602081019050602083039250610cf6565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610de55780601f10610dba57610100808354040283529160200191610de5565b820191906000526020600020905b815481529060010190602001808311610dc857829003601f168201915b50505050506020604051908101604052806000815250612abe565b151561100757836002866040518082805190602001908083835b602083101515610e3f5780518252602082019150602081019050602083039250610e1a565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001019080519060200190610e88929190614b6e565b50826002866040518082805190602001908083835b602083101515610ec25780518252602082019150602081019050602083039250610e9d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020181905550816002866040518082805190602001908083835b602083101515610f355780518252602082019150602081019050602083039250610f10565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206003019080519060200190610f7e929190614b6e565b50806002866040518082805190602001908083835b602083101515610fb85780518252602082019150602081019050602083039250610f93565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206004019080519060200190611001929190614b6e565b5061111c565b60a060405190810160405280868152602001858152602001848152602001838152602001828152506002866040518082805190602001908083835b6020831015156110675780518252602082019150602081019050602083039250611042565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008201518160000190805190602001906110b6929190614bee565b5060208201518160010190805190602001906110d3929190614bee565b506040820151816002015560608201518160030190805190602001906110fa929190614bee565b506080820151816004019080519060200190611117929190614bee565b509050505b7f2e8ef10935b19f1c3593162006814f90e4a4dfc2363beab5c3b6a41e73423a866111b06002876040518082805190602001908083835b6020831015156111785780518252602082019150602081019050602083039250611153565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902061363d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156111f05780820151818401526020810190506111d5565b50505050905090810190601f16801561121d5780820380516001836020036101000a031916815260200191505b509250505060405180910390a15050505050565b6000606061124f836020604051908101604052806000815250612abe565b15156114ce57826004856040518082805190602001908083835b60208310151561128e5780518252602082019150602081019050602083039250611269565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060060190805190602001906112d7929190614b6e565b506020604051908101604052806000815250905061136c6040805190810160405280600b81526020017f7b225f636f6e4944223a22000000000000000000000000000000000000000000815250856040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b90506113ef6040805190810160405280600a81526020017f225f737461747573223a00000000000000000000000000000000000000000000815250846040805190810160405280600181526020017f7d0000000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b90507ff150d649ec141f0b8f073f0a348a26b6c5d555d188beaba3f47be9a8ec8c67a0816040518080602001828103825283818151815260200191508051906020019080838360005b83811015611453578082015181840152602081019050611438565b50505050905090810190601f1680156114805780820380516001836020036101000a031916815260200191505b509250505060405180910390a17fc7e6f05741002696bc7031e6403db1417f032e6353d8371fd687b10572c7e9d560016040518082815260200191505060405180910390a16001915061150b565b7fc7e6f05741002696bc7031e6403db1417f032e6353d8371fd687b10572c7e9d560006040518082815260200191505060405180910390a1600091505b5092915050565b60606116346002836040518082805190602001908083835b60208310151561154f578051825260208201915060208101905060208303925061152a565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116195780601f106115ee57610100808354040283529160200191611619565b820191906000526020600020905b8154815290600101906020018083116115fc57829003601f168201915b50505050506020604051908101604052806000815250612abe565b15156116b4576116ad6002836040518082805190602001908083835b6020831015156116755780518252602082019150602081019050602083039250611650565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902061363d565b90506116c8565b602060405190810160405280600081525090505b919050565b600060606116eb846020604051908101604052806000815250612abe565b1580156116f9575060008314155b15611d0d57826003856040518082805190602001908083835b6020831015156117375780518252602082019150602081019050602083039250611712565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060050154016003856040518082805190602001908083835b6020831015156117a75780518252602082019150602081019050602083039250611782565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600501819055506003846040518082805190602001908083835b60208310151561181957805182526020820191506020810190506020830392506117f4565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600401546003856040518082805190602001908083835b6020831015156118885780518252602082019150602081019050602083039250611863565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060050154141561197e576040805190810160405280600181526020017f43000000000000000000000000000000000000000000000000000000000000008152506003856040518082805190602001908083835b602083101515611933578051825260208201915060208101905060208303925061190e565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600601908051906020019061197c929190614b6e565b505b8260026003866040518082805190602001908083835b6020831015156119b95780518252602082019150602081019050602083039250611994565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001016040518082805460018160011615610100020316600290048015611a4a5780601f10611a28576101008083540402835291820191611a4a565b820191906000526020600020905b815481529060010190602001808311611a36575b50509150509081526020016040518091039020600201540160026003866040518082805190602001908083835b602083101515611a9c5780518252602082019150602081019050602083039250611a77565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001016040518082805460018160011615610100020316600290048015611b2d5780601f10611b0b576101008083540402835291820191611b2d565b820191906000526020600020905b815481529060010190602001808311611b19575b505091505090815260200160405180910390206002018190555060206040519081016040528060008152509050611bdb6040805190810160405280600b81526020017f7b225f696f754964223a22000000000000000000000000000000000000000000815250856040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b9050611c666040805190810160405280600a81526020017f225f616d6f756e74223a00000000000000000000000000000000000000000000815250611c1f85613c52565b6040805190810160405280600181526020017f7d0000000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b90507fa72dfd5774a4fdc9e90a43a1e22bdc677b9688725777b881bf8140867bc6f470816040518080602001828103825283818151815260200191508051906020019080838360005b83811015611cca578082015181840152602081019050611caf565b50505050905090810190601f168015611cf75780820380516001836020036101000a031916815260200191505b509250505060405180910390a160019150611d12565b600091505b5092915050565b60006060611e3d6002856040518082805190602001908083835b602083101515611d585780518252602082019150602081019050602083039250611d33565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e225780601f10611df757610100808354040283529160200191611e22565b820191906000526020600020905b815481529060010190602001808311611e0557829003601f168201915b50505050506020604051908101604052806000815250612abe565b158015611e4e57506305f5e1008313155b1561208c57826002856040518082805190602001908083835b602083101515611e8c5780518252602082019150602081019050602083039250611e67565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206002018190555060206040519081016040528060008152509050611f5a6040805190810160405280600b81526020017f7b225f6f72674944223a22000000000000000000000000000000000000000000815250856040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b9050611fe56040805190810160405280600a81526020017f225f616d6f756e74223a00000000000000000000000000000000000000000000815250611f9e85613c52565b6040805190810160405280600181526020017f7d0000000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b90507f6bf9372fa8d8feee5b62db537c53ebb7a81d2f6ddf6254d1d2ce739ebb7dd045816040518080602001828103825283818151815260200191508051906020019080838360005b8381101561204957808201518184015260208101905061202e565b50505050905090810190601f1680156120765780820380516001836020036101000a031916815260200191505b509250505060405180910390a160019150612091565b600091505b5092915050565b6060600080600080858702935060018685010392506005805490508310151561211757600060058054905011156120d9576001600580549050039250612116565b6040805190810160405280600281526020017f5b5d00000000000000000000000000000000000000000000000000000000000081525094506122c4565b5b61215f6040805190810160405280600181526020017f5b0000000000000000000000000000000000000000000000000000000000000081525086612c0090919063ffffffff16565b9450600091508390505b82811115156122795781156121c3576121c06040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525086612c0090919063ffffffff16565b94505b61226661225760036005848154811015156121da57fe5b90600052602060002001604051808280546001816001161561010002031660029004801561223f5780601f1061221d57610100808354040283529182019161223f565b820191906000526020600020905b81548152906001019060200180831161222b575b50509150509081526020016040518091039020613e3b565b86612c0090919063ffffffff16565b9450600191508080600101915050612169565b6122c16040805190810160405280600181526020017f5d0000000000000000000000000000000000000000000000000000000000000081525086612c0090919063ffffffff16565b94505b5050505092915050565b6000600580549050905090565b60006002886040518082805190602001908083835b60208310151561231557805182526020820191506020810190506020830392506122f0565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020154861315612394577fe4fe2196e1583cb0bc7ea7930d9c8782c085f8096fcb802007279b6a7c8c1e2360006040518082815260200191505060405180910390a160009050612835565b6124b460048b6040518082805190602001908083835b6020831015156123cf57805182526020820191506020810190506020830392506123aa565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124995780601f1061246e57610100808354040283529160200191612499565b820191906000526020600020905b81548152906001019060200180831161247c57829003601f168201915b50505050506020604051908101604052806000815250612abe565b15156124c35760019050612835565b610120604051908101604052808b81526020018a81526020018981526020018881526020018781526020018681526020018581526020018481526020018381525060048b6040518082805190602001908083835b60208310151561253c5780518252602082019150602081019050602083039250612517565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600082015181600001908051906020019061258b929190614bee565b5060208201518160010190805190602001906125a8929190614bee565b5060408201518160020190805190602001906125c5929190614bee565b5060608201518160030190805190602001906125e2929190614bee565b506080820151816004015560a0820151816005019080519060200190612609929190614bee565b5060c0820151816006019080519060200190612626929190614bee565b5060e0820151816007019080519060200190612643929190614bee565b50610100820151816008019080519060200190612661929190614bee565b5090505060068a90806001815401808255809150509060018203906000526020600020016000909192909190915090805190602001906126a2929190614b6e565b50507f974ccfef94c5d01ac28e5fc5abb903b7aa40c9e50e26683934029369fdc6fb7261273860048c6040518082805190602001908083835b60208310151561270057805182526020820191506020810190506020830392506126db565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020612c77565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561277857808201518184015260208101905061275d565b50505050905090810190601f1680156127a55780820380516001836020036101000a031916815260200191505b509250505060405180910390a16127f88a898b868a60006040805190810160405280600181526020017f500000000000000000000000000000000000000000000000000000000000000081525089614652565b7fe4fe2196e1583cb0bc7ea7930d9c8782c085f8096fcb802007279b6a7c8c1e2360016040518082815260200191505060405180910390a1600190505b9998505050505050505050565b60008054905090565b60606040805190810160405280600881526020017f5375706c496e666f000000000000000000000000000000000000000000000000815250905090565b6060600080600080858702935060018685010392506006805490508310151561290757600060068054905011156128c9576001600680549050039250612906565b6040805190810160405280600281526020017f5b5d0000000000000000000000000000000000000000000000000000000000008152509450612ab4565b5b61294f6040805190810160405280600181526020017f5b0000000000000000000000000000000000000000000000000000000000000081525086612c0090919063ffffffff16565b9450600091508390505b8281111515612a695781156129b3576129b06040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525086612c0090919063ffffffff16565b94505b612a56612a4760046006848154811015156129ca57fe5b906000526020600020016040518082805460018160011615610100020316600290048015612a2f5780601f10612a0d576101008083540402835291820191612a2f565b820191906000526020600020905b815481529060010190602001808311612a1b575b50509150509081526020016040518091039020612c77565b86612c0090919063ffffffff16565b9450600191508080600101915050612959565b612ab16040805190810160405280600181526020017f5d0000000000000000000000000000000000000000000000000000000000000081525086612c0090919063ffffffff16565b94505b5050505092915050565b60008082518451141515612ad55760009150612bf9565b600090505b8351811015612bf4578281815181101515612af157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168482815181101515612b6c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141515612be95760009150612bf9565b806001019050612ada565b600191505b5092915050565b6060600080600084518651016040519080825280601f01601f191660200182016040528015612c3e5781602001602082028038833980820191505090505b509350602086019250602085019150602084019050612c5f81848851614b23565b612c6e86518201838751614b23565b50505092915050565b60606040805190810160405280600181526020017f7b000000000000000000000000000000000000000000000000000000000000008152509050612dce6040805190810160405280600981526020017f22636f6e4944223a220000000000000000000000000000000000000000000000815250836000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612d825780601f10612d5757610100808354040283529160200191612d82565b820191906000526020600020905b815481529060010190602001808311612d6557829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b9050612eed6040805190810160405280600b81526020017f2273616c654f7267223a22000000000000000000000000000000000000000000815250836001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612ea15780601f10612e7657610100808354040283529160200191612ea1565b820191906000526020600020905b815481529060010190602001808311612e8457829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b905061300c6040805190810160405280600a81526020017f226275794f7267223a2200000000000000000000000000000000000000000000815250836002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612fc05780601f10612f9557610100808354040283529160200191612fc0565b820191906000526020600020905b815481529060010190602001808311612fa357829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b905061312b6040805190810160405280600d81526020017f227472616e7354797065223a2200000000000000000000000000000000000000815250836003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156130df5780601f106130b4576101008083540402835291602001916130df565b820191906000526020600020905b8154815290600101906020018083116130c257829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b90506131ba6040805190810160405280600981526020017f22616d6f756e74223a00000000000000000000000000000000000000000000008152506131738460040154613c52565b6040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b90506132d96040805190810160405280600b81526020017f22636f6e48617368223a22000000000000000000000000000000000000000000815250836005018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561328d5780601f106132625761010080835404028352916020019161328d565b820191906000526020600020905b81548152906001019060200180831161327057829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b90506133f86040805190810160405280601081526020017f226c6174657374537461747573223a2200000000000000000000000000000000815250836006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156133ac5780601f10613381576101008083540402835291602001916133ac565b820191906000526020600020905b81548152906001019060200180831161338f57829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b90506135176040805190810160405280600d81526020017f227472616e7354696d65223a2200000000000000000000000000000000000000815250836007018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156134cb5780601f106134a0576101008083540402835291602001916134cb565b820191906000526020600020905b8154815290600101906020018083116134ae57829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b90506136366040805190810160405280600e81526020017f2275706461746554696d65223a22000000000000000000000000000000000000815250836008018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156135ea5780601f106135bf576101008083540402835291602001916135ea565b820191906000526020600020905b8154815290600101906020018083116135cd57829003601f168201915b50505050506040805190810160405280600281526020017f227d00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b9050919050565b60606040805190810160405280600181526020017f7b0000000000000000000000000000000000000000000000000000000000000081525090506137946040805190810160405280600981526020017f226f72674944223a220000000000000000000000000000000000000000000000815250836000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156137485780601f1061371d57610100808354040283529160200191613748565b820191906000526020600020905b81548152906001019060200180831161372b57829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b90506138b36040805190810160405280600b81526020017f226f72674e616d65223a22000000000000000000000000000000000000000000815250836001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156138675780601f1061383c57610100808354040283529160200191613867565b820191906000526020600020905b81548152906001019060200180831161384a57829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b90506139426040805190810160405280600b81526020017f22696f754c696d6974223a0000000000000000000000000000000000000000008152506138fb8460020154613c52565b6040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b9050613a616040805190810160405280600e81526020017f2263726561746554696d65223a22000000000000000000000000000000000000815250836003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613a155780601f106139ea57610100808354040283529160200191613a15565b820191906000526020600020905b8154815290600101906020018083116139f857829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b9050613b806040805190810160405280600e81526020017f2275706461746554696d65223a22000000000000000000000000000000000000815250836004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613b345780601f10613b0957610100808354040283529160200191613b34565b820191906000526020600020905b815481529060010190602001808311613b1757829003601f168201915b50505050506040805190810160405280600281526020017f227d00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b9050919050565b6060600080600080600080875189518b518d510101016040519080825280601f01601f191660200182016040528015613bcf5781602001602082028038833980820191505090505b50965060208b01955060208a01945060208901935060208801925060208701915060009050613c02818301878d51614b23565b8a5181019050613c16818301868c51614b23565b895181019050613c2a818301858b51614b23565b885181019050613c3e818301848a51614b23565b875181019050505050505050949350505050565b6060600080600080600080871415613ca1576040805190810160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509550613e31565b86945060019350600092506000871215613cc8578660000394506000935082806001019350505b8491505b6000821115613cf157600a82811515613ce157fe5b0491508280600101935050613ccc565b8260ff166040519080825280601f01601f191660200182016040528015613d275781602001602082028038833980820191505090505b509550831515613d92577f2d00000000000000000000000000000000000000000000000000000000000000866000815181101515613d6157fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b6001830390505b6000851115613e30576030600a86811515613db057fe5b06017f01000000000000000000000000000000000000000000000000000000000000000286828060019003935060ff16815181101515613dec57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85811515613e2857fe5b049450613d99565b5b5050505050919050565b60606040805190810160405280600181526020017f7b000000000000000000000000000000000000000000000000000000000000008152509050613f926040805190810160405280600981526020017f22696f754964223a220000000000000000000000000000000000000000000000815250836000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613f465780601f10613f1b57610100808354040283529160200191613f46565b820191906000526020600020905b815481529060010190602001808311613f2957829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b90506140b16040805190810160405280600b81526020017f2266726f6d4f7267223a22000000000000000000000000000000000000000000815250836001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156140655780601f1061403a57610100808354040283529160200191614065565b820191906000526020600020905b81548152906001019060200180831161404857829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b90506141d06040805190810160405280600b81526020017f22726563764f7267223a22000000000000000000000000000000000000000000815250836002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156141845780601f1061415957610100808354040283529160200191614184565b820191906000526020600020905b81548152906001019060200180831161416757829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b90506142ef6040805190810160405280600d81526020017f227472616e7354696d65223a2200000000000000000000000000000000000000815250836003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156142a35780601f10614278576101008083540402835291602001916142a3565b820191906000526020600020905b81548152906001019060200180831161428657829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b905061437e6040805190810160405280600981526020017f22616d6f756e74223a00000000000000000000000000000000000000000000008152506143378460040154613c52565b6040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b905061440d6040805190810160405280600a81526020017f2270616964416d74223a000000000000000000000000000000000000000000008152506143c68460050154613c52565b6040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b905061452c6040805190810160405280600d81526020017f22696f75537461747573223a2200000000000000000000000000000000000000815250836006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156144e05780601f106144b5576101008083540402835291602001916144e0565b820191906000526020600020905b8154815290600101906020018083116144c357829003601f168201915b50505050506040805190810160405280600281526020017f222c00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b905061464b6040805190810160405280600e81526020017f2275706461746554696d65223a22000000000000000000000000000000000000815250836007018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156145ff5780601f106145d4576101008083540402835291602001916145ff565b820191906000526020600020905b8154815290600101906020018083116145e257829003601f168201915b50505050506040805190810160405280600281526020017f227d00000000000000000000000000000000000000000000000000000000000081525084613b87909392919063ffffffff16565b9050919050565b6147726003896040518082805190602001908083835b60208310151561468d5780518252602082019150602081019050602083039250614668565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156147575780601f1061472c57610100808354040283529160200191614757565b820191906000526020600020905b81548152906001019060200180831161473a57829003601f168201915b50505050506020604051908101604052806000815250612abe565b151561477d57614b19565b836002886040518082805190602001908083835b6020831015156147b65780518252602082019150602081019050602083039250614791565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020154036002886040518082805190602001908083835b6020831015156148265780518252602082019150602081019050602083039250614801565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206002018190555061010060405190810160405280898152602001888152602001878152602001868152602001858152602001848152602001838152602001828152506003896040518082805190602001908083835b6020831015156148d357805182526020820191506020810190506020830392506148ae565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000820151816000019080519060200190614922929190614bee565b50602082015181600101908051906020019061493f929190614bee565b50604082015181600201908051906020019061495c929190614bee565b506060820151816003019080519060200190614979929190614bee565b506080820151816004015560a0820151816005015560c08201518160060190805190602001906149aa929190614bee565b5060e08201518160070190805190602001906149c7929190614bee565b509050506005889080600181540180825580915050906001820390600052602060002001600090919290919091509080519060200190614a08929190614b6e565b50507fbfbdca690759acacbbdf3e9825f2909d2d22ff9bac4d35ab4b3dccb1e6226300614a9e60038a6040518082805190602001908083835b602083101515614a665780518252602082019150602081019050602083039250614a41565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020613e3b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015614ade578082015181840152602081019050614ac3565b50505050905090810190601f168015614b0b5780820380516001836020036101000a031916815260200191505b509250505060405180910390a15b5050505050505050565b60005b602082101515614b4b5782518452602084019350602083019250602082039150614b26565b6001826020036101000a0390508019835116818551168181178652505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614baf57805160ff1916838001178555614bdd565b82800160010185558215614bdd579182015b82811115614bdc578251825591602001919060010190614bc1565b5b509050614bea9190614c6e565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614c2f57805160ff1916838001178555614c5d565b82800160010185558215614c5d579182015b82811115614c5c578251825591602001919060010190614c41565b5b509050614c6a9190614c6e565b5090565b614c9091905b80821115614c8c576000816000905550600101614c74565b5090565b905600a165627a7a7230582051346c0528e9dfe4fab344cdc2903378e58c8831667b5f4201aac155f265cbbd0029";

    private SuplInfo(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private SuplInfo(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<InitIouLimitDataEventResponse> getInitIouLimitDataEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("InitIouLimitData", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<InitIouLimitDataEventResponse> responses = new ArrayList<InitIouLimitDataEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            InitIouLimitDataEventResponse typedResponse = new InitIouLimitDataEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<InitIouLimitDataEventResponse> initIouLimitDataEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("InitIouLimitData", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, InitIouLimitDataEventResponse>() {
            @Override
            public InitIouLimitDataEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                InitIouLimitDataEventResponse typedResponse = new InitIouLimitDataEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<SetIouLimitEventResponse> getSetIouLimitEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SetIouLimit", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<SetIouLimitEventResponse> responses = new ArrayList<SetIouLimitEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            SetIouLimitEventResponse typedResponse = new SetIouLimitEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SetIouLimitEventResponse> setIouLimitEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SetIouLimit", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SetIouLimitEventResponse>() {
            @Override
            public SetIouLimitEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                SetIouLimitEventResponse typedResponse = new SetIouLimitEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<IouRecycleEventResponse> getIouRecycleEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("IouRecycle", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<IouRecycleEventResponse> responses = new ArrayList<IouRecycleEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            IouRecycleEventResponse typedResponse = new IouRecycleEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<IouRecycleEventResponse> iouRecycleEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("IouRecycle", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, IouRecycleEventResponse>() {
            @Override
            public IouRecycleEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                IouRecycleEventResponse typedResponse = new IouRecycleEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<AddIouEventResponse> getAddIouEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddIou", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AddIouEventResponse> responses = new ArrayList<AddIouEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AddIouEventResponse typedResponse = new AddIouEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddIouEventResponse> addIouEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddIou", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddIouEventResponse>() {
            @Override
            public AddIouEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AddIouEventResponse typedResponse = new AddIouEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<AddTransactionEventResponse> getAddTransactionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AddTransactionEventResponse> responses = new ArrayList<AddTransactionEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AddTransactionEventResponse typedResponse = new AddTransactionEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddTransactionEventResponse> addTransactionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddTransactionEventResponse>() {
            @Override
            public AddTransactionEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AddTransactionEventResponse typedResponse = new AddTransactionEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<UpdateTransStatusEventResponse> getUpdateTransStatusEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UpdateTransStatus", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<UpdateTransStatusEventResponse> responses = new ArrayList<UpdateTransStatusEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            UpdateTransStatusEventResponse typedResponse = new UpdateTransStatusEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UpdateTransStatusEventResponse> updateTransStatusEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UpdateTransStatus", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UpdateTransStatusEventResponse>() {
            @Override
            public UpdateTransStatusEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                UpdateTransStatusEventResponse typedResponse = new UpdateTransStatusEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<AddTransactionResultEventResponse> getAddTransactionResultEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddTransactionResult", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AddTransactionResultEventResponse> responses = new ArrayList<AddTransactionResultEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AddTransactionResultEventResponse typedResponse = new AddTransactionResultEventResponse();
            typedResponse._code = (Int256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddTransactionResultEventResponse> addTransactionResultEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddTransactionResult", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddTransactionResultEventResponse>() {
            @Override
            public AddTransactionResultEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AddTransactionResultEventResponse typedResponse = new AddTransactionResultEventResponse();
                typedResponse._code = (Int256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<UpdateTransStatusResultEventResponse> getUpdateTransStatusResultEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UpdateTransStatusResult", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<UpdateTransStatusResultEventResponse> responses = new ArrayList<UpdateTransStatusResultEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            UpdateTransStatusResultEventResponse typedResponse = new UpdateTransStatusResultEventResponse();
            typedResponse._code = (Int256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UpdateTransStatusResultEventResponse> updateTransStatusResultEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UpdateTransStatusResult", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UpdateTransStatusResultEventResponse>() {
            @Override
            public UpdateTransStatusResultEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                UpdateTransStatusResultEventResponse typedResponse = new UpdateTransStatusResultEventResponse();
                typedResponse._code = (Int256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Future<Utf8String> getVersion() {
        Function function = new Function("getVersion", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> queryTransByConId(Utf8String conID) {
        Function function = new Function("queryTransByConId", 
                Arrays.<Type>asList(conID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getTransLength() {
        Function function = new Function("getTransLength", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> initIouLimitData(Utf8String _orgID, Utf8String _orgName, Int256 _iouLimit, Utf8String _createTime, Utf8String _updateTime) {
        Function function = new Function("initIouLimitData", Arrays.<Type>asList(_orgID, _orgName, _iouLimit, _createTime, _updateTime), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> updateTransStatus(Utf8String conID, Utf8String status) {
        Function function = new Function("updateTransStatus", Arrays.<Type>asList(conID, status), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getIouLimit(Utf8String orgID) {
        Function function = new Function("getIouLimit", 
                Arrays.<Type>asList(orgID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> iouRecycle(Utf8String iouId, Int256 amount) {
        Function function = new Function("iouRecycle", Arrays.<Type>asList(iouId, amount), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> setIouLimit(Utf8String orgID, Int256 amount) {
        Function function = new Function("setIouLimit", Arrays.<Type>asList(orgID, amount), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getIouList(Uint256 _pageNo, Uint256 _pageSize) {
        Function function = new Function("getIouList", 
                Arrays.<Type>asList(_pageNo, _pageSize), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getIouLength() {
        Function function = new Function("getIouLength", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addTransaction(Utf8String _conID, Utf8String _saleOrg, Utf8String _buyOrg, Utf8String _transType, Int256 _amount, Utf8String _conHash, Utf8String _status, Utf8String _transTime, Utf8String _updateTime) {
        Function function = new Function("addTransaction", Arrays.<Type>asList(_conID, _saleOrg, _buyOrg, _transType, _amount, _conHash, _status, _transTime, _updateTime), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Int256> getNumber() {
        Function function = new Function("getNumber", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

//    public Future<Utf8String> getContractName() {
//        Function function = new Function("getContractName", 
//                Arrays.<Type>asList(), 
//                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
//        return executeCallSingleValueReturnAsync(function);
//    }

    public Future<Utf8String> queryTransList(Uint256 _pageNo, Uint256 _pageSize) {
        Function function = new Function("queryTransList", 
                Arrays.<Type>asList(_pageNo, _pageSize), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public static Future<SuplInfo> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Int256 _number, Utf8String _version) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_number, _version));
        return deployAsync(SuplInfo.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static Future<SuplInfo> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Int256 _number, Utf8String _version) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_number, _version));
        return deployAsync(SuplInfo.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static SuplInfo load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SuplInfo(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static SuplInfo load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SuplInfo(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class InitIouLimitDataEventResponse {
        public Utf8String _json;
    }

    public static class SetIouLimitEventResponse {
        public Utf8String _json;
    }

    public static class IouRecycleEventResponse {
        public Utf8String _json;
    }

    public static class AddIouEventResponse {
        public Utf8String _json;
    }

    public static class AddTransactionEventResponse {
        public Utf8String _json;
    }

    public static class UpdateTransStatusEventResponse {
        public Utf8String _json;
    }

    public static class AddTransactionResultEventResponse {
        public Int256 _code;
    }

    public static class UpdateTransStatusResultEventResponse {
        public Int256 _code;
    }
}
